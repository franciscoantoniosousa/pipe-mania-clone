(()=>{"use strict";function e(e,t){return Math.floor(Math.random()*(t-e+1)+e)}const t=["","./images/base-pipes/4-connector.png","./images/base-pipes/bottom-left-curve.png","./images/base-pipes/bottom-right-curve.png","./images/base-pipes/top-left-curve.png","./images/base-pipes/top-right-curve.png","./images/base-pipes/horizontal.png","./images/base-pipes/vertical.png","./images/base-pipes/blocked-pipe.png","./images/base-pipes/start-to-right.png","./images/base-pipes/start-to-left.png","./images/base-pipes/start-to-bottom.png","./images/base-pipes/start-to-top.png","./images/background.png","./images/filled-pipes/4-connector-filled.png","./images/filled-pipes/4-connector-horizontal-half.png","./images/filled-pipes/4-connector-vertical-half.png","./images/filled-pipes/bottom-left-curve-filled.png","./images/filled-pipes/bottom-right-curve-filled.png","./images/filled-pipes/top-left-curve-filled.png","./images/filled-pipes/top-right-curve-filled.png","./images/filled-pipes/horizontal-filled.png","./images/filled-pipes/vertical-filled.png","./images/filled-pipes/start-to-right-filled.png","./images/filled-pipes/start-to-left-filled.png","./images/filled-pipes/start-to-bottom-filled.png","./images/filled-pipes/start-to-top-filled.png"],i=document.querySelector("canvas").getContext("2d");class s{static cellWidth=40;static cellHeight=40;constructor({gameManager:e,position:i,src:s,type:r}){this.position=i,this.width=38,this.height=38,this.gameManager=e;const n=new Image;n.src=s,n.onload=()=>{this.image=n};const o=new Image;o.src=t[this.getPipeWithWaterImage(r)],o.onload=()=>{this.imageFilled=o},this.withWater=!1,this.type=r,this.alreadyFilled=!1}getPipeWithWaterImage(e){switch(console.log("trying to get filled water pipe"),e){case 1:return!1===this.alreadyFilled?(this.alreadyFilled=!0,0===this.gameManager.currentPipe.direction||1===this.gameManager.currentPipe.direction?16:15):14;case 2:return 17;case 3:return 18;case 4:return 19;case 5:return 20;case 6:return 21;case 7:return 22;case 9:return 23;case 10:return 24;case 11:return 25;case 12:return 26}}draw(){const e=this.withWater?this.imageFilled:this.image;e?i.drawImage(e,this.position.x,this.position.y,this.width,this.height):(i.fillStyle="rgb(255, 201, 14)",i.fillRect(this.position.x,this.position.y,this.width,this.height))}resize(e,t){}}const r=document.querySelector("canvas").getContext("2d");class n{constructor({position:e}){this.position=e,this.width=s.cellWidth,this.height=s.cellHeight,this.moved=!1}draw(){r.lineWidth=3,r.strokeStyle="red",r.strokeRect(this.position.x*s.cellWidth-1,this.position.y*s.cellHeight-1,this.width,this.height)}update(){this.moved&&(this.moved=!1),this.draw()}}const o=document.querySelector("#timeElement"),a=document.querySelector("#distanceElement"),c=document.querySelector("#scoreElement"),h=document.querySelector("canvas"),l=h.getContext("2d"),p=document.querySelector("#timeElement"),d=document.querySelector("#distanceElement"),g=document.querySelector("#scoreElement");h.width=innerWidth,h.height=innerHeight;const u=new class{constructor(){this.countdownTimer=20,this.currentPipe={x:0,y:0,direction:0},this.gameGrid=[],this.gameStarted=!1,this.grid=[[13,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[13,13,0,0,0,0,0,0,0,0,0],[13,13,0,0,0,0,0,0,0,0,0]],this.loadingNextLevel=!1,this.player=new n({position:{x:5,y:5}}),this.nextPipes=[],this.remainingDistance=e(4,20),this.score=0,this.stopCountDown=!1,this.updateQueue=!1,this.isGameOver=!1}addPipe(){let t=e(1,7);this.nextPipes.push(t),console.log("Number of pipes",this.nextPipes.length),this.updateQueue=!0}canReceiveWater(e,t){switch(console.log("Direction",t," Type",e),e){case 1:switch(t){case 1:return this.currentPipe.direction=1,!0;case 0:return this.currentPipe.direction=0,!0;case 2:return this.currentPipe.direction=2,!0;case 3:return this.currentPipe.direction=3,!0}break;case 2:switch(t){case 0:case 3:return!1;case 1:return this.currentPipe.direction=3,!0;case 2:return this.currentPipe.direction=0,!0}break;case 3:switch(t){case 0:case 2:return!1;case 1:return this.currentPipe.direction=2,!0;case 3:return this.currentPipe.direction=0,!0}break;case 4:switch(t){case 0:return this.currentPipe.direction=3,!0;case 2:return this.currentPipe.direction=1,!0;case 1:case 3:return!1}break;case 5:switch(t){case 0:return this.currentPipe.direction=2,!0;case 3:return this.currentPipe.direction=1,!0;case 1:case 2:return!1}break;case 6:switch(t){case 1:case 0:return!1;case 2:return this.currentPipe.direction=2,!0;case 3:return this.currentPipe.direction=3,!0}break;case 7:switch(t){case 1:return this.currentPipe.direction=1,!0;case 0:return this.currentPipe.direction=0,!0;case 2:case 3:return!1}break;case 8:return console.log("Clogged Pipe"),!1;case 9:case 10:case 11:case 12:return console.log("Starting Pipe"),!1;default:return console.log("There is no pipe on this cell"),!1}}drawPipeQueue(){console.log("New Pipe in queue drawn"),this.gameGrid[11]=new s({position:{x:0,y:s.cellHeight},src:t[this.nextPipes[3]],type:this.nextPipes[3],gameManager:this}),this.gameGrid[22]=new s({position:{x:0,y:2*s.cellHeight},src:t[this.nextPipes[2]],type:this.nextPipes[2],gameManager:this}),this.gameGrid[33]=new s({position:{x:0,y:3*s.cellHeight},src:t[this.nextPipes[1]],type:this.nextPipes[1],gameManager:this}),this.gameGrid[44]=new s({position:{x:0,y:4*s.cellHeight},src:t[this.nextPipes[0]],type:this.nextPipes[0],gameManager:this}),this.updateQueue=!1}gameOver(){c.innerHTML="",a.innerHTML="",o.innerHTML="GAME OVER! Press Anywhere to restart the game!"}getNextPipeInStream(){console.log("trying to fill next pipe");let e=11*this.currentPipe.y+this.currentPipe.x;switch(this.gameGrid[e].withWater=!0,this.currentPipe.direction){case 1:this.currentPipe.y+1>=7&&(this.isGameOver=!0);break;case 0:this.currentPipe.y-1<0&&(this.isGameOver=!0);break;case 2:this.currentPipe.x-1<2&&(this.isGameOver=!0);break;case 3:this.currentPipe.x+1>=11&&(this.isGameOver=!0)}if(console.log("Check if current pipe is sending water out of the game grid:",this.isGameOver),this.isGameOver&&!1===this.loadingNextLevel)return console.log("Game over, sent water out of grid"),void this.gameOver();let t,i={x:0,y:0};switch(this.currentPipe.direction){case 1:t=this.grid[this.currentPipe.y+1][this.currentPipe.x],i.x=this.currentPipe.x,i.y=this.currentPipe.y+1;break;case 0:t=this.grid[this.currentPipe.y-1][this.currentPipe.x],i.x=this.currentPipe.x,i.y=this.currentPipe.y-1;break;case 2:t=this.grid[this.currentPipe.y][this.currentPipe.x-1],i.x=this.currentPipe.x-1,i.y=this.currentPipe.y;break;case 3:t=this.grid[this.currentPipe.y][this.currentPipe.x+1],i.x=this.currentPipe.x+1,i.y=this.currentPipe.y}if(console.log("next pipe coords: ",i.x,i.y),!1===this.canReceiveWater(t,this.currentPipe.direction))return this.isGameOver=!0,void(!1===this.loadingNextLevel&&(console.log("Game Over, the next pipe cannot receive water from the previous pipe",this.isGameOver),this.gameOver()));console.log("Next Pipe was filled with water!!!"),this.currentPipe.x=i.x,this.currentPipe.y=i.y,this.score+=100,this.remainingDistance--,c.innerHTML=`Score: ${this.score}`,a.innerHTML=`Distance: ${this.remainingDistance}`,this.remainingDistance<=0&&!1===this.loadingNextLevel&&(this.stopCountDown=!0,this.nextLevel())}nextLevel(){for(console.log("Next Level"),this.loadingNextLevel=!0;!1===this.isGameOver;)this.getNextPipeInStream();this.isGameOver=!1,this.gameGrid.forEach((e=>{e.type>=1&&e.type<=7&&!1===e.withWater&&(console.log("Penalized 50 for not using a pipe"),this.score-=50)})),c.innerHTML="",a.innerHTML="";const e=setInterval((()=>{console.log("countDown: ",this.countdownTimer),o.innerHTML=`Going to next level in: ${this.countdownTimer}`,this.countdownTimer<=0?(clearInterval(e),this.restartGame(!0)):this.countdownTimer--}),1e3)}restartGame(t){this.countdownTimer=20,this.currentPipe={x:0,y:0,direction:0},this.gameGrid=[],this.gameStarted=!1,this.grid=[[13,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[0,13,0,0,0,0,0,0,0,0,0],[13,13,0,0,0,0,0,0,0,0,0],[13,13,0,0,0,0,0,0,0,0,0]],this.loadingNextLevel=!1,this.player=new n({position:{x:5,y:5}}),this.nextPipes=[],this.remainingDistance=e(4,20),!1===t&&(this.score=0),this.stopCountDown=!1,this.updateQueue=!1,this.isGameOver=!1,this.startGame()}setPipePosition(e,i){let r=Math.floor(e/s.cellWidth),n=Math.floor(i/s.cellHeight);if(r>=2&&r<11&&n>=0&&n<7){for(let e=8;e<=12;e++)if(this.grid[n][r]===e)return void console.log("Cannot place pipe in this position, its a blocked pipe or starting pipe");this.grid[n][r]=this.nextPipes.shift(),this.addPipe();let e=11*n+r;this.gameGrid[e]=new s({position:{x:s.cellWidth*r,y:s.cellHeight*n},src:t[this.grid[n][r]],type:this.grid[n][r],gameManager:this}),console.log("Pipe was played on coords:",n,r)}}startCountdown(){const e=setInterval((()=>{this.isGameOver?clearInterval(e):(console.log("countDown: ",this.countdownTimer),o.innerHTML=`Time Left: ${this.countdownTimer}`,this.countdownTimer<=0?(clearInterval(e),this.startWaterFlow()):this.countdownTimer--)}),1e3)}startGame(){c.innerHTML=`Score: ${this.score}`,a.innerHTML=`Distance: ${this.remainingDistance}`,o.innerHTML=`Time Left: ${this.countdownTimer}`,this.stopCountDown=!1,console.log("Initialize");const i=e(0,4);for(let t=0;t<i;t++){let t=e(0,6),i=e(2,10);this.grid[t][i]=8,console.log("blockedCell",t,i)}let r=e(9,12),n=!1;for(;!1===n;){let t=e(0,5),i=e(2,10);if(8!==this.grid[t+1][i]){let e=!1;switch(r){case 9:let s=i+1;console.log("next column: ",s),s<11&&8!==this.grid[t][s]&&(e=!0);break;case 10:let r=i-1;r>=2&&8!==this.grid[t][r]&&(e=!0);break;case 11:let n=t+1;n>0&&8!==this.grid[n][i]&&(e=!0);break;case 12:let o=t-1;o>=0&&8!==this.grid[o][i]&&(e=!0)}if(e){switch(this.grid[t][i]=r,this.currentPipe.y=t,this.currentPipe.x=i,r){case 9:this.currentPipe.direction=3;break;case 10:this.currentPipe.direction=2;break;case 11:this.currentPipe.direction=1;break;case 12:this.currentPipe.direction=0}console.log("Starting pipe of type: ",r,". was set on position: ",t,i,"with starting direction: ",this.currentPipe.direction),n=!0}else console.log("pipe type: ",r,"could not place pipe here:",i,t,"water would flow out of the map")}else console.log("Could not set initial pipe here")}for(let e=0;e<4;e++)this.addPipe();this.gameStarted=!0,this.grid.forEach(((e,i)=>{e.forEach(((e,r)=>{this.gameGrid.push(new s({position:{x:s.cellWidth*r,y:s.cellHeight*i},src:t[e],type:e,gameManager:this}))}))})),this.startCountdown()}startWaterFlow(){console.log("StartWaterFlow");const e=setInterval((()=>{if(this.isGameOver)clearInterval(e);else{if(console.log("water flow countDown: ",this.countdownTimer),o.innerHTML=`Time Left: ${this.countdownTimer}`,this.isGameOver||this.stopCountDown)return console.log("Game Over, stop water flow timer"),void clearInterval(e);this.countdownTimer<=0?(this.countdownTimer=3,this.getNextPipeInStream()):this.countdownTimer--}}),1e3)}update(){if(!1!==this.gameStarted){this.player.update(),this.gameStarted&&this.updateQueue&&this.drawPipeQueue();for(const e in this.gameGrid)this.gameGrid[e].draw()}}};!function e(){requestAnimationFrame(e),l.clearRect(0,0,h.width,h.height),u.update()}(),window.addEventListener("mousedown",(e=>{u.gameStarted&&!1===u.isGameOver?u.setPipePosition(e.clientX+-160,e.clientY+-160):(console.log("Started Game on Click!"),u.restartGame(!1))})),window.addEventListener("mousemove",(e=>{if(u.gameStarted){let t=Math.floor((e.clientX+-160)/s.cellWidth),i=Math.floor((e.clientY+-160)/s.cellHeight);t>=2&&t<11&&i>=0&&i<7&&(u.player.position.x=t,u.player.position.y=i,u.player.moved=!0)}!1===u.isGameOver&&!1===u.gameStarted&&(g.innerHTML="",d.innerHTML="",p.innerHTML="Press Anywhere to start the game!")})),window.addEventListener("resize",(()=>{const e=window.innerWidth,t=window.innerHeight;u.gameGrid.forEach((i=>i.resize(e,t))),l.clearRect(0,0,h.width,h.height),u.gameGrid.forEach((e=>e.draw()))}))})();